- seo_header = ''
- if @rewrite_meta_header.present?
  - seo_header = @rewrite_meta_header
- elsif @running_root_request
  - root_cat_id = params[:top_level_cat_id].gsub(/\-.*/, '')
  - content_for :meta_title, t("meta.root_category_#{root_cat_id}.meta_title")
  - content_for :meta_description, t("meta.root_category_#{root_cat_id}.meta_description")
  - seo_header = t("meta.root_category_#{root_cat_id}.seo_header")
- elsif @category_id.present? && @brand_id.blank? && @gender.blank? # category
  - content_for :meta_title, t('meta.category_title', :category => @categories.first.name)
  - content_for :meta_description, t('meta.category_description', :category => @categories.first.name.try(:mb_chars).downcase)
  - seo_header = t('meta.category_header', :category => @categories.first.name)
- elsif @category_id.present? && @brand_id.present? && @gender.blank? # category + brand
  - content_for :meta_title, t('meta.category_brand_title', :category => @categories.first.name, :brand => @brand.name.try(:mb_chars).downcase)
  - content_for :meta_description, t('meta.category_brand_description', :category => @categories.first.name.try(:mb_chars).downcase, :brand => @brand.name)
  - seo_header = t('meta.category_brand_header', :category => @categories.first.name, :brand => @brand.name)
- elsif @category_id.present? && @brand_id.blank? && @gender.present? # category + gender
  - content_for :meta_title, t('meta.category_gender_title', :category => @categories.first.name, :gender => @item_models.first.try(:gender).try(:name).try(:mb_chars).try(:downcase))
  - content_for :meta_description, t('meta.category_gender_description', :category => @categories.first.name.try(:mb_chars).downcase, :gender => @item_models.first.try(:gender).try(:name).try(:mb_chars).try(:downcase))
  - seo_header = t('meta.category_gender_header', :category => @categories.first.name, :gender => @item_models.first.try(:gender).try(:name).try(:mb_chars).try(:downcase))
- else
  = set_meta(@categories.first.try(:top_category_name))

-#- elsif @category_id.blank? && @brand_id.blank? && @gender.present? # gender
-#  - content_for :meta_title, t('meta.category_gender_title', :category => @categories.first.name, :gender => @item_models.first.try(:gender).try(:name).try(:downcase))
-#  - content_for :meta_description, t('meta.category_gender_description', :category => @categories.first.name.downcase, :gender => @item_models.first.try(:gender).try(:name).try(:downcase))
-#  - seo_header = t('meta.category_gender_header', :category => @categories.first.name, :gender => @item_models.first.try(:gender).try(:name).try(:downcase))


- content_for :no_index, 'true' if @set_no_index
- if @categories.present?
  - steps = [link_to(t(@categories.first.top_category_name), category_url(@categories.first.top_category))]
- else
  - steps = []

- if @category_id.present? && @categories.present?
  - steps << link_to(@categories.first.name, build_uri(top_level_cat_id: @categories.first.top_category, category: @categories.first.to_param))
-  if params[:brand].present? && @item_models.present?
  - steps << link_to(@item_models.first.brand.name, build_uri(top_level_cat_id: @categories.first.top_category, category: @categories.first.to_param))
- if params[:sub_category].present? && @item_models.present?
  - steps << link_to(@item_models.first.sub_category.name, build_uri(top_level_cat_id: @categories.first.top_category, category: @categories.first.to_param, sub_category: @item_models.first.sub_category.to_param))
- if @rewrite_meta_header.present?
  - steps << @rewrite_meta_header
= bread_crumbs(steps)
.separator_header
%h1.seo_header= seo_header
.separator_header



.category-page.search_wrapper.advanced_search_wrapper
  .brows_category
    .brows_lable
      .bl_style= t(@categories.first.try(:top_category_name))
      .bl_image
    %ul.main_category
      - @categories.each do |category|
        %li.mcl_link
          = link_to category.name, build_uri(request.filtered_parameters.merge({ category: category.to_param }))

    .genders
      .brows_lable
        .bl_style= t("genders")
        .bl_image
      .content
        %ul.main_category
          - @gender_counts.each do |count_value|
            - next if [3,5].include?(count_value.gender_id.to_i)
            %li.mcl_link
              - gender_name = count_value.try(:type_name) rescue count_value.try(:gender_name)
              - gender_value = count_value.try(:count_value) rescue count_value.try(:value)
              %a.mcl_link_left{ :href => build_uri(request.filtered_parameters.merge({ gender: "#{count_value.gender_id}-#{gender_name}".parameterize })) }= gender_name
              %a.mcl_link_right{ :href => build_uri(request.filtered_parameters.merge({ gender: "#{count_value.gender_id}-#{gender_name}".parameterize })) }= gender_value

    - unless @running_root_request
      .sub_categories
        .brows_lable
          .bl_style= t("sub_categories")
          .bl_image
        .content
          %ul.main_category
            - @sub_categories_counts.each do |count_value|
              %li.mcl_link
                %a.mcl_link_left{ :href => build_uri(request.filtered_parameters.merge({ sub_category: count_value.sub_category_id })) }= count_value.try(:type_name) rescue count_value.try(:sub_category_name)
                %a.mcl_link_right{ :href => build_uri(request.filtered_parameters.merge({ sub_category: count_value.sub_category_id })) }= count_value.try(:count_value) rescue count_value.try(:value)

      .price_filter_container{ data: { current_uri: build_uri(request.filtered_parameters) }}
        .brows_lable
          .bl_style= t("prices")
          .bl_image
        .content
          %ul.main_category
            #max_price.invisible= (1000*@exchange_rate).to_i
            #currency.invisible= @currency
            - min_price = params[:price_range].try(:split, '-').try(:first).to_i
            - max_price = params[:price_range].try(:split, '-').try(:last) || (1000*@exchange_rate).to_i
            %span#price_range_label
              = "#{min_price} #@currency - #{max_price} #@currency"
            .price_filter{ data: { current_min: min_price, current_max: max_price } }
              #price_slider
              = link_to "eggs", "", :id => "price_filter", :class => "invisible"

      .colors
        .brows_lable
          .bl_style= t("colors")
          .bl_image
        .content
          %ul.main_category.colors
            - @color_counts.each do |count_value|
              .image_div
                = link_to build_uri(request.filtered_parameters.merge({ color: count_value.type_name })) do
                  %img{ src: count_value.swatch_url}
      .sizes
        .brows_lable
          .bl_style= t("sizes")
          .bl_image
        .content
          %ul.main_category
            %table.size-table
              - @size_counts.in_groups_of(5).each do |count_values|
                %tr
                  - count_values.each do |count_value|
                    - if count_value.present?
                      %td
                        %a{ :href => build_uri(request.filtered_parameters.merge({ size: count_value.size_value })) }= count_value.size_value

  = render @item_models, locals: { params: params }
  - unless @running_root_request
    = paginate @item_models, :window => 6
  .delimiter

  - if @male_brands.present?
    .separator_header
    %h4= t 'brands_in_male'
    .category_logos_block
      - @male_brands.in_groups_of(3).each do |brand_group|
        - brand_group.each do |brand|
          - next if brand.blank? || brand.logo_url.blank?
          %a.category_logos{ :href => build_uri( request.filtered_parameters.merge({:brand => brand.to_param}) ) }
            = image_tag brand.logo_url, alt: brand.name, title: brand.name, rel: 'nofollow'
          .cl_delimeter

  .delimiter
  - if @female_brands.present?
    .separator_header
    %h4= t 'brands_in_female'
    .category_logos_block
      - @female_brands.in_groups_of(3).each do |brand_group|
        - brand_group.each do |brand|
          - next if brand.blank? || brand.logo_url.blank?
          %a.category_logos{ :href => build_uri( request.filtered_parameters.merge({:brand => brand.to_param}) ) }
            = image_tag brand.logo_url, alt: brand.name, title: brand.name, rel: 'nofollow'
          .cl_delimeter

  .delimiter
  - if @kids_brands.present?
    .separator_header
    %h4= t 'brands_in_kids'
    .category_logos_block
      - @kids_brands.in_groups_of(3).each do |brand_group|
        - brand_group.each do |brand|
          - next if brand.blank? || brand.logo_url.blank?
          %a.category_logos{ :href => build_uri( request.filtered_parameters.merge({:brand => brand.to_param}) ) }
            = image_tag brand.logo_url, alt: brand.name, title: brand.name, rel: 'nofollow'
          .cl_delimeter
